// gson item - single type for objects
// =============================================================================
// main prototype - does both objects
GsonObject = {}

GsonObject.Get = function(_key, _default_value = null)
    if self.hasIndex(_key) then return self[_key]
	if _default_value != null then return _default_value
	return null
end function

// setter - works for both objects and arrays
GsonObject.Set = function(_key, _value) 
	self[str(_key)] = _value
end function

GsonObject.values = function()
	items = values_func(self)
	items.remove(GsonObject)
	return items
end function

GsonObject.indexes = function()
	keys = index_func(self)
	keys.remove("__isa")
    return keys
end function

GsonObject.Has = function(_key)
    return self.hasIndex(locals._key)
end function

GsonObject.New = function(_data = null)
    instance = new GsonObject
	if _data != null then
		for key in _data.indexes
			if key != "__isa" then
				instance[key] = _data[key]
			end if
		end for
	end if
	return instance
end function

index_func = @map.indexes
values_func = @map.values
typeof_func = @typeof

typeof = function(_obj)
	result = typeof_func(_obj)
	if result == "map" and _obj.hasIndex("__isa") and _obj.__isa == GsonObject then
		return "gsonobject"
	end if
	return result
end function

module.exports = GsonObject
